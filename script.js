// Generated by CoffeeScript 1.3.1
(function() {
  var markdown;

  markdown = new require('showdown').Showdown;

  markdown.converter();

  require('domready')(function() {
    var $, number, reader, updateView;
    $ = jQuery;
    number = function() {
      var count, h, i, map, num, order, sel, selector, t, _i, _j, _len, _len1, _ref, _results;
      selector = 'H1,H2,H3,H4,H5,H6,OL,UL,LI';
      order = selector.split(',');
      map = {};
      for (i = _i = 0, _len = order.length; _i < _len; i = ++_i) {
        sel = order[i];
        map[sel] = {
          c: 0,
          pos: i
        };
      }
      num = function(tag) {
        var c, i, t;
        return ((function() {
          var _j, _ref, _results;
          _results = [];
          for (i = _j = 0, _ref = map[tag].pos; 0 <= _ref ? _j <= _ref : _j >= _ref; i = 0 <= _ref ? ++_j : --_j) {
            if ((c = map[(t = order[i])].c) !== 0 && (t !== 'OL' && t !== 'UL')) {
              _results.push(c);
            }
          }
          return _results;
        })()).join(',');
      };
      count = function(sel) {
        var e, i, _j, _ref, _ref1, _results;
        e = map[sel];
        e.c++;
        _results = [];
        for (i = _j = _ref = e.pos + 1, _ref1 = order.length; _ref <= _ref1 ? _j < _ref1 : _j > _ref1; i = _ref <= _ref1 ? ++_j : --_j) {
          _results.push(map[order[i]].c = 0);
        }
        return _results;
      };
      _ref = $(selector);
      _results = [];
      for (i = _j = 0, _len1 = _ref.length; _j < _len1; i = ++_j) {
        h = _ref[i];
        t = h.tagName;
        count(t);
        if (t !== 'OL' && t !== 'UL') {
          _results.push(h.setAttribute('data-number', num(t)));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };
    updateView = function() {
      var ta, v;
      ta = $('#markdown-input');
      v = $('#view');
      v.html(markdown.makeHtml(ta.val()));
      return number();
    };
    reader = new FileReader;
    reader.onload = function(e) {
      $('#markdown-input').val(e.target.result);
      return updateView();
    };
    $('#file').change(function() {
      return reader.readAsText(this.files[0]);
    });
    $('body').click(function() {
      return $('#markdown-input').focus();
    });
    $('#markdown-input').keyup(updateView).keydown(function(e) {
      var key, pos;
      key = e.keyCode;
      console.log(e.keyCode);
      if (key === 9) {
        pos = $(this).getCursorPosition();
        this.value = this.value.substr(0, pos) + '    ' + this.value.substr(pos);
        return false;
      }
    });
    return updateView();
  });

}).call(this);
