// Generated by CoffeeScript 1.3.3
(function() {
  var coders, kvpToDict,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  kvpToDict = function(d, kvp) {
    return d[kvp[0]] = (kvp[1] != null ? kvp[1] : true);
  };

  coders = {
    lzw: {
      encode: function(data, fn) {
        return fn(base64.encode(lzw_encode(data)));
      },
      decode: function(data, fn) {
        return fn(lzw_decode(base64.decode(data)));
      }
    },
    base64: {
      encode: function(data, fn) {
        return fn(base64.encode(data));
      },
      decode: function(data, fn) {
        return fn(base64.decode(data));
      }
    }
  };

  this.Storage = (function() {
    var _this = this;

    function Storage() {
      var _ref, _ref1;
      if ((_ref = this.id) == null) {
        this.id = new Id;
      }
      if ((_ref1 = this.version) == null) {
        this.version = 0;
      }
    }

    Storage.prototype.local = {
      save: function(data, fn) {
        if (Storage.id in localStorage) {
          Storage.version += 1;
        }
        localStorage[Storage.id] = data;
        return fn(Storage.id, Storage.version);
      },
      get: function(id, fn) {
        var data, _ref;
        Storage.id = id;
        _ref = localStorage[Storage.id], data = _ref.data, Storage.version = _ref.version;
        return fn(data, Storage.version);
      }
    };

    return Storage;

  }).call(this);

  this.State = (function(_super) {

    __extends(State, _super);

    function State() {
      State.__super__.constructor.call(this);
      this.state = {
        toc: false,
        index: false
      };
      this.start();
    }

    State.prototype.start = function() {
      var host, pathname, protocol, _ref;
      _ref = window.location, protocol = _ref.protocol, host = _ref.host, pathname = _ref.pathname;
      return this.baseUrl = protocol + '//' + host + pathname;
    };

    State.prototype.parseState = function(str) {
      var kvp, _i, _len, _ref, _results;
      _ref = str.split(',');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        kvp = _ref[_i];
        if (kvp !== '') {
          _results.push(kvpToDict(this.state, kvp.split('=')));
        }
      }
      return _results;
    };

    State.prototype.generateState = function() {
      var k, v;
      return ((function() {
        var _ref, _results;
        _ref = this.state;
        _results = [];
        for (k in _ref) {
          v = _ref[k];
          if ((v != null) && v !== false) {
            if (v === true) {
              _results.push(k);
            } else {
              _results.push(k + '=' + v);
            }
          }
        }
        return _results;
      }).call(this)).join(',');
    };

    State.prototype._get = function(type, id, fn) {
      return this.storage[type].get(id, fn);
    };

    State.prototype._save = function(type, data, fn) {
      return this.storage[type].save(data, fn);
    };

    State.prototype.parseHash = function(hash, fn) {
      var data, pos, state;
      if (hash.charAt(0 === '#')) {
        hash = hash.substring(1);
      }
      pos = hash.indexOf(';');
      if (pos === -1) {
        state = hash;
      } else {
        state = hash.substring(0, pos);
        data = hash.substring(pos + 1);
      }
      this.parseState(state);
      if (data != null) {
        return this.decodeData(data, function(data) {
          return fn(data);
        });
      } else {
        return fn();
      }
    };

    State.prototype.generateHash = function(type, data, fn) {
      var _this = this;
      if ((type != null) && (data != null)) {
        return this.encodeData(type, data, function(str) {
          return fn('#' + _this.generateState() + ';' + str);
        });
      } else {
        return fn('#' + this.generateState());
      }
    };

    State.prototype.replace = function() {
      return this._save(type, data, function(id, version) {
        return window.history.replaceState({}, '', this.baseUrl + type + '/' + id + '/' + version + '#' + generateState());
      });
    };

    State.prototype.has = function(type) {
      return (this.state[type] != null) && this.state[type] !== false;
    };

    State.prototype.set = function(type, val) {
      this.state[type] = val;
      return this.emit('change', type, val);
    };

    State.prototype.toggle = function(type) {
      return this.set(type, !this.has(type));
    };

    return State;

  })(EventEmitter);

}).call(this);
